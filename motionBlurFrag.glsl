#version 400
/*
	This is another shader that textures with a framebuffer. Except this one is special.
	This shader shades the quad of a composite FBO Textured Quad. 

	Every frame of animation we render into a different one of those 6 framebuffers down there.

	Then when we combine the images of all 6 framebuffers, we get an average of the past
	6 frames. THAT'S MOTION BLUR BABY!
*/

/*
	The interpolated texture coordinate received from the vertex shader.
*/
smooth in vec2 texCoord;

/*
	The GLSL required output vec4.
*/
out vec4 colorOut;

/*
These uniform names are defined by the Composite FBO Quad as framebuffers are added
to it. These names must reflect the ones generated by the CPU side code.
*/
uniform sampler2D fboSampler0;
uniform sampler2D fboSampler1;
uniform sampler2D fboSampler2;
uniform sampler2D fboSampler3;
uniform sampler2D fboSampler4;
uniform sampler2D fboSampler5;

/*
	Here we average the renders of the previous 6 frames.
*/
void main()
{
	colorOut = vec4( texture(fboSampler0, texCoord).rgb, (1.00/6.00) );
	colorOut += vec4( texture(fboSampler1, texCoord).rgb, (1.00/6.00) );
	colorOut += vec4( texture(fboSampler2, texCoord).rgb, (1.00/6.00) );
	colorOut += vec4( texture(fboSampler3, texCoord).rgb, (1.00/6.00) );
	colorOut += vec4( texture(fboSampler4, texCoord).rgb, (1.00/6.00) );
	colorOut += vec4( texture(fboSampler5, texCoord).rgb, (1.00/6.00) );
}

